package at.sparklingscience.urbantrees.cms;

import java.util.Date;

import org.springframework.validation.Errors;

import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectWriter;

import at.sparklingscience.urbantrees.domain.UserContent;
import at.sparklingscience.urbantrees.domain.UserContentLanguage;
import at.sparklingscience.urbantrees.domain.UserContentStatus;
import at.sparklingscience.urbantrees.domain.UserIdentity;

/**
 * Represents single CMS user-content entry generated by the frontend.
 * This class is only used when receiving cms content.
 * Sending content happens as untyped string.
 * 
 * @author Laurenz Fiala
 * @since 2020/12/28
 */
public class CmsContent {
	
	/**
	 * UID of the user content that this content is based on.
	 * If it is not the most recent entry anymore, saving is prevented.
	 */
	@JsonView(CmsContentViews.Receive.class)
	private Long historyId;
	
	/**
	 * UID of the user content that this content is supposed to be after.
	 */
	@JsonView(CmsContentViews.Receive.class)
	private Long previousId;
	
	/**
	 * UID of the user content that this content is supposed to be before.
	 */
	@JsonView(CmsContentViews.Receive.class)
	private Long nextId;
	
	/**
	 * Date at which this object was generated by the frontend.
	 */
	@JsonView(CmsContentViews.Persist.class)
	private Date saved;
	
	/**
	 * Date at which this object was sent to us by the frontend.
	 */
	@JsonView(CmsContentViews.Persist.class)
	private Date sent;
	
	/**
	 * The serialized frontend content data.
	 */
	@JsonView(CmsContentViews.Persist.class)
	private SerializedCmsContent content;
	
	/**
	 * Converts this {@link CmsContent} to {@link UserContent} for DB-insertion.
	 * {@link #elements} is formatted as JSON and put into {@link UserContent#setContent(String)}.
	 * @param cmsContent content to convert. Must have already been validated.
	 * @param contentPath content path
	 * @param contentLanguage contents content language
	 * @param status current status of the user content
	 * @param user the calling user
	 * @param writer json serializer which handles conversion from {@link CmsContent} to string.
	 * @return new {@link UserContent} instance with set content.
	 * @throws JsonProcessingException if the cmsContent can't be serialized
	 */
	public static UserContent toUserContent(CmsContent cmsContent,
											String contentPath,
											String contentLanguage,
											UserContentStatus status,
											UserIdentity user,
											ObjectWriter writer) throws JsonProcessingException {
				
		UserContent userContent = new UserContent();
		userContent.setContentPath(contentPath);
		userContent.setHistoryId(cmsContent.getHistoryId());
		userContent.setPreviousId(cmsContent.getPreviousId());
		userContent.setNextId(cmsContent.getNextId());
		userContent.setContentLanguage(UserContentLanguage.fromId(contentLanguage));
		userContent.setStatus(status);
		userContent.setUser(user);
		userContent.setSaveDate(new Date());
		userContent.setContent(writer.writeValueAsString(cmsContent));
		
		return userContent;
		
	}
	
	/**
	 * Validate all {@link CmsElement}s in {@link #content}.
	 * Assumes content is not null.
	 * @param errors Errors object passed from the controller.
	 */
	public void validate(Errors errors) {
		this.content.validate(errors);
	}
	
	/**
	 * Sanitize all {@link CmsElement}s in {@link #content}.
	 * Assumes content is not null.
	 */
	public void sanitize() {
		this.content.sanitize();
	}
	
	public Long getHistoryId() {
		return historyId;
	}

	public void setHistoryId(Long historyId) {
		this.historyId = historyId;
	}

	public Date getSaved() {
		return saved;
	}

	public void setSaved(Date saved) {
		this.saved = saved;
	}

	public Date getSent() {
		return sent;
	}

	public void setSent(Date sent) {
		this.sent = sent;
	}

	public SerializedCmsContent getContent() {
		return content;
	}

	public void setContent(SerializedCmsContent content) {
		this.content = content;
	}

	public Long getPreviousId() {
		return previousId;
	}

	public void setPreviousId(Long previousId) {
		this.previousId = previousId;
	}

	public Long getNextId() {
		return nextId;
	}

	public void setNextId(Long nextId) {
		this.nextId = nextId;
	}
	
}
