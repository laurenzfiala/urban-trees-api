<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="at.sparklingscience.urbantrees.mapper.UserContentMapper">

    <resultMap id="UserContentMetadataResultMap" type="at.sparklingscience.urbantrees.domain.UserContentMetadata">
        <id 	column="id"					property="id" />
        <result column="content_path"		property="contentPath" />
        <result column="content_title"		property="contentTitle" />
        <result column="status"				property="status" />
        <result column="save_dat"			property="saveDate" />
        <result column="hist_id"			property="historyId" />
        <result column="prev_id"			property="previousId" />
        <result column="next_id"			property="nextId" />
        <result column="approve_dat"		property="approveDate" />
        
        <association property="contentLanguage" javaType="at.sparklingscience.urbantrees.domain.UserContentLanguage" >
            <id column="content_lang" 		property="id" />
        </association>
	    <association column="user_id"
				     property="user"
				     select="at.sparklingscience.urbantrees.mapper.AuthMapper.findUserIdentityById" />
	    <association column="approve_user_id"
				     property="approveUser"
				     select="at.sparklingscience.urbantrees.mapper.AuthMapper.findUserIdentityById" />
    </resultMap>

    <resultMap id="UserContentResultMap"
    		   type="at.sparklingscience.urbantrees.domain.UserContent"
    		   extends="UserContentMetadataResultMap">
        <result column="content"			property="content" />
    </resultMap>
    
    <resultMap id="UserContentFileResultMap" type="at.sparklingscience.urbantrees.domain.UserContentFile">
        <id 	column="id"					property="id" />
        <result column="path"				property="path" />
        <result column="type"				property="type" />
        <result column="activate_cuid"		property="activateContentUid" />
        <result column="deactivate_cuid"	property="deactivateContentUid" />
        <result column="active"				property="active" />
        <result column="user_id"			property="userId" />
    </resultMap>

    <resultMap id="UserContentSaveAmountResultMap"
    		   type="at.sparklingscience.urbantrees.domain.UserContentSaveAmount">
        <result column="amount"				property="amount" />
        <result column="min_save_date"		property="minSaveDate" />
    </resultMap>

    <resultMap id="UserContentAccessResultMap"
    		   type="at.sparklingscience.urbantrees.domain.UserContentAccess">
        <id column="id"						property="id" />
        <result column="content_path"		property="contentPath" />
        <result column="enabled"			property="enabled" />
        <result column="keep_history"		property="keepHistory" />
        <result column="anon_allow_view"	property="anonAllowView" />
        <result column="anon_allow_edit"	property="anonAllowEdit" />
        <result column="user_allow_view"	property="userAllowView" />
        <result column="user_allow_edit"	property="userAllowEdit" />
        
	    <association column="anon_approval_by_role"
				     property="anonApprovalByRole"
				     select="at.sparklingscience.urbantrees.mapper.AuthMapper.findRoleById" />
	    <association column="user_approval_by_role"
				     property="userApprovalByRole"
				     select="at.sparklingscience.urbantrees.mapper.AuthMapper.findRoleById" />
		<collection column="id"
					property="roleAccess"
					select="findContentAccessRoleByAccessId" />
    </resultMap>
    
    <resultMap id="UserContentAccessRoleResultMap"
    		   type="at.sparklingscience.urbantrees.domain.UserContentAccessRole">
        <id column="id"						property="id" />
        <result column="content_access_id"	property="contentAccessId" />
        <result column="allow_view"			property="allowView" />
        <result column="allow_edit"			property="allowEdit" />
        
	    <association column="approval_by_role"
				     property="approvalByRole"
				     select="at.sparklingscience.urbantrees.mapper.AuthMapper.findRoleById" />
	     <association column="role_id"
				     property="role"
				     select="at.sparklingscience.urbantrees.mapper.AuthMapper.findRoleById" />
    </resultMap>
    
    <!--  TODO save new content = flushCache="true" -->
    
    <select id="findContentAccess" resultMap="UserContentAccessResultMap">
		select
			*
		from
			user_data.content_access ca 
		where
			content_path ~ #{pathExp}
	</select>
    
    <select id="findContentAccessRoleByAccessId" resultMap="UserContentAccessRoleResultMap">
		select
			*
		from
			user_data.content_access_role car 
		where
			content_access_id = #{id}
	</select>
	
	<select id="findSavedContentAmountForUserId" resultMap="UserContentSaveAmountResultMap">
		select
			count(*) as amount, min(save_dat) as min_save_date
		from
			user_data."content" c
		where
			user_id = #{userId}
			and save_dat > now() - interval '1 day'
	</select>
	
	<select id="findContentMetadataById" resultMap="UserContentMetadataResultMap">
		select
			*
		from
			user_data."content" c
		where
			c.id = #{contentUid}
	</select>
	
	<!-- TODO -->
	<sql id="sqlContentList">
		with recursive content_rec as (
			(
		    select
				*
			from
				user_data."content" c0
			where
				content_path = #{contentPath}
				and content_lang = #{contentLang.id}
				<if test="!substituteUserDrafts">
					and status::text like 'APPROVED%'
				</if>
				<if test="substituteUserDrafts">
					and (status = 'DRAFT'
					or status::text like 'APPROVED%')
				</if>
				and prev_id is null
				and (
					select
						count(*)
					from
						user_data."content"
					where
						hist_id = c0.id
						and content_path = c0.content_path
						and status::text like 'APPROVED%'
				) = 0
				order by c0.save_dat desc, c0.id desc
				limit 1
			)
		  union
		  	(
		  	select
				c.*
			from
				user_data."content" c
			inner join content_rec cr
		  		on cr.next_id = c.id
				and cr.content_path = c.content_path
				and cr.content_lang = c.content_lang
				and (
					select
						count(*)
					from
						user_data."content"
					where
						hist_id = c.id
						and content_path = c.content_path
						and status::text like 'APPROVED%'
				) = 0
				<if test="substituteUserDrafts">
					and (
						select
							count(*)
						from 
							user_data."content"
						where
							id != c.id
							and content_path = c.content_path
							and content_lang = c.content_lang
							and hist_id = c.hist_id
							and status = 'DRAFT'
					) = 0
					and (
						(c.status = 'DRAFT' and c.user_id = #{userId})
						or (c.status::text like 'APPROVED%')
					)
				</if>
				<if test="!substituteUserDrafts">
					and c.status::text like 'APPROVED%'
				</if>
			)
		)
	</sql>
	
	<select id="findContentIdListForPath" resultType="java.lang.Long">
		<include refid="sqlContentList" />
		SELECT 
			c.id
		FROM content_rec c
	</select>
	
	<select id="findContent" resultMap="UserContentResultMap">
		<include refid="sqlContentList"></include>
		SELECT 
			*
		FROM content_rec c
	</select>
	
	<select id="findContentForHistoryId" resultMap="UserContentResultMap">
		select 
			*
		from
			user_data."content"
		where
			hist_id = #{historyId}
	</select>
	
	<sql id="sqlHistoryList">
		with recursive content_rec as (
		    select
				*
			from
				user_data."content"
			where
				id = #{contentUid}
				and status::text like 'APPROVED%'
		  union
		  	select
				c.*
			from
				user_data."content" c
			inner join content_rec cr
		  		on cr.hist_id = c.id
	  			and cr.content_path = c.content_path
	  			and cr.content_lang = c.content_lang
				and cr.status = c.status
		)
	</sql>
	
	<select id="findContentHistory" resultMap="UserContentResultMap">
		<include refid="sqlHistoryList"></include>
		SELECT 
			*
		FROM content_rec c
	</select>
	
	<select id="findContentUserHistory" resultMap="UserContentMetadataResultMap">
		select
			*
		from
			user_data."content" c
		where
			c.user_id = #{userId}
			<if test="contentPathExp != null">
				and c.content_path ~ #{contentPathExp}
			</if>
		order by
			c.save_dat desc
		limit #{limit}
	</select>
	
	<update id="approveContentById"> <!-- TODO -->
		update
			user_data."content"
		set
			approve_dat = now(),
			approve_user_id = #{userId},
			mod_dat = now(),
			mod_usr = user
		where 
			id = #{contentUid}
			and status = 'AWAITING_APPROVAL'
			or status::text like '%AWAITING_DELETION'
	</update>
	
	<insert id="registerContent">
		insert into
			user_data.content_registry
			(
				"path"
			)
		values
			(
				#{contentPath}
			)
		on conflict
			do nothing
	</insert>
	
	<insert id="insertContent" useGeneratedKeys="true" keyColumn="id" keyProperty="c.id">
		insert into
			user_data."content"
			(
				content_path,
				content_title,
				content_lang,
				"content",
				status,
				save_dat,
				hist_id,
				prev_id,
				next_id,
				user_id,
				approve_dat,
				approve_user_id,
				cre_dat,
				mod_dat,
				cre_usr,
				mod_usr
			)
		values
			(
				#{c.contentPath},
				#{c.contentTitle},
				#{c.contentLanguage.id},
				#{c.content},
				#{c.status,jdbcType=OTHER},
				#{c.saveDate},
				#{c.historyId},
				#{c.previousId},
				#{c.nextId},
				<if test="c.user == null">
					null,
				</if>
				<if test="c.user != null">
					#{c.user.id},
				</if>
				#{c.approveDate},
				<if test="c.approveUser == null">
					null,
				</if>
				<if test="c.approveUser != null">
					#{c.approveUser.id},
				</if>
				now(),
				now(),
				user,
				user
			)
	</insert>
	
	<update id="updateContent">
		update
			user_data."content"
		set
			content_title = #{c.contentTitle},
			content = #{c.content},
			status = #{c.status,jdbcType=OTHER},
			save_dat = #{c.saveDate},
			hist_id = #{c.historyId},
			prev_id = #{c.previousId},
			next_id = #{c.nextId},
			approve_dat = #{c.approveDate},
			<if test="c.user == null">
				user_id = null,
			</if>
			<if test="c.user != null">
				user_id = #{c.user.id},
			</if>
			<if test="c.approveUser == null">
				approve_user_id = null,
			</if>
			<if test="c.approveUser != null">
				approve_user_id = #{c.approveUser.id},
			</if>
			mod_dat = now(),
			mod_usr = user
		where 
			id = #{c.id}
	</update>
	
	<update id="updateContentStatus">
		update
			user_data."content"
		set
			status = #{status,jdbcType=OTHER},
			mod_dat = now(),
			mod_usr = user
		where
			id = #{contentUid}
	</update>
	
	<select id="findContentUserDraft" resultMap="UserContentMetadataResultMap">
		select
			*
		from
			user_data."content" c
		where
			c.content_path = #{contentPath}
			and c.content_lang = #{contentLang.id}
			and c.status = 'DRAFT'
			and c.user_id = #{userId}
			and (
				c.id = #{historyId}
				or
				c.hist_id = #{historyId}
			)
	</select>
	
	<delete id="deleteContentUserDraft">
		delete from
			user_data."content" c
		where
			id = #{id}
			and status = 'DRAFT'
	</delete>
	
	<update id="stitchContent">
		<!-- set previous -->
		<if test="c.previousId != null">
			update
				user_data."content"
			set
				next_id = #{prevNextId}
			where
				id = #{c.previousId};		
		</if>
			
		<!-- set next -->
		<if test="c.nextId != null">
			update
				user_data."content"
			set
				prev_id = #{nextPrevId}
			where
				id = #{c.nextId};		
		</if>
	</update>

	<insert id="insertContentFile" useGeneratedKeys="true" keyColumn="id" keyProperty="file.id">
		insert into
			user_data.content_file 
			(
				content_path,
				"path",
				"type",
				user_id,
				cre_dat,
				mod_dat,
				cre_usr,
				mod_usr
			)
		values
			(
				#{contentPath},
				#{file.path},
				#{file.type},
				#{file.userId},
				now(),
				now(),
				user,
				user
			)
	</insert>
	
	<update id="updateActivateContentFile">
		update
			user_data.content_file
		set
			activate_cuid = #{contentUid},
			active = true,
			mod_dat = now(),
			mod_usr = user
		where 
			id = #{id}
			and activate_cuid is null
			and active = false
			and user_id = #{userId}
	</update>
	
	<update id="updateDeactivateContentFile">
		update
			user_data.content_file
		set
			deactivate_cuid = #{contentUid},
			active = false,
			mod_dat = now(),
			mod_usr = user
		where 
			id = #{id}
			and activate_cuid is not null
			and deactivate_cuid is null
			and active = true
	</update>
	
	<select id="findContentFile" resultMap="UserContentFileResultMap">
		select
			*
		from 
			user_data.content_file
		where
			id = #{id}
			and content_path = #{contentPath}
	</select>
	
	<select id="findActiveContentFilesForContentUid" resultMap="UserContentFileResultMap">
		<include refid="sqlHistoryList"></include>
		select 
			cf.id,
			cf."path",
			cf."type",
			cf.activate_cuid,
			cf.deactivate_cuid,
			cf.active
		from
			content_rec c,
			user_data.content_file cf
		where
			c.id = cf.activate_cuid
			and cf.active = true
	</select>

</mapper>