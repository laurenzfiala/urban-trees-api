<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="at.sparklingscience.urbantrees.mapper.AuthMapper">

	<cache
	  eviction="LRU"
	  flushInterval="900000"
	  size="512"
	  readOnly="true"/>

    <resultMap id="AuthResultMap" type="Integer">
        <result column="amount" 	property="value" />
    </resultMap>

    <resultMap id="UserMap" type="at.sparklingscience.urbantrees.domain.User">
        <id column="id" 							property="id" />
        <result column="username" 					property="username" />
        <result column="password" 					property="password" />
        <result column="is_active" 					property="isActive" />
        <result column="is_credentials_non_expired" property="isCredentialsNonExpired" />
        <result column="failed_login_attempts"		property="failedloginAttempts" />
        <result column="last_login_attempt_dat" 	property="lastLoginAttemptDate" />
        <result column="last_login_dat" 			property="lastLoginDate" />
        <result column="secure_login_key" 			property="secureLoginKey" />
        <result column="is_using_otp" 				property="isUsingOtp" />
        <result column="cre_dat" 					property="creationDate" />
        
        <collection
	        column="id"
	        property="roles"
	        select="findRolesByUserId" />
    </resultMap>
    
    <resultMap id="UserLightMap" type="at.sparklingscience.urbantrees.domain.UserLight">
        <id column="id" 							property="id" />
        <result column="username" 					property="username" />
        <result column="is_active" 					property="isActive" />
        <result column="is_credentials_non_expired" property="isCredentialsNonExpired" />
        <result column="failed_login_attempts"		property="failedloginAttempts" />
        <result column="last_login_attempt_dat" 	property="lastLoginAttemptDate" />
        <result column="last_login_dat" 			property="lastLoginDate" />
        <result column="is_using_otp" 				property="isUsingOtp" />
        <result column="cre_dat" 					property="creationDate" />
        
        <collection
	        column="id"
	        property="roles"
	        select="findRolesByUserId" />
    </resultMap>
    
    <resultMap id="UserIdentityMap" type="at.sparklingscience.urbantrees.domain.UserIdentity">
        <id column="id" 							property="id" />
        <result column="username"					property="username" />
    </resultMap>
    
    <resultMap id="RoleMap" type="at.sparklingscience.urbantrees.domain.Role">
        <id column="id" 							property="id" />
        <result column="name"						property="name" />
    </resultMap>
    
    <resultMap id="OtpCredentialsMap" type="at.sparklingscience.urbantrees.domain.OtpCredentials">
        <result column="otp_secret"					property="secret" />
        <result column="otp_scratch_code_1"			property="scratchCode1" />
        <result column="otp_scratch_code_2"			property="scratchCode2" />
        <result column="otp_scratch_code_3"			property="scratchCode3" />
    </resultMap>

    <select id="hasValidApiKey" resultMap="AuthResultMap" useCache="true">
        select 
		    count(0) as amount
		from 
		    access_data.api_key
		where
		    api_key = #{apiKey}
    </select>
    
    <select id="findUserByLoginKey" resultMap="UserMap" useCache="false">
        select 
		    u.id,
			u.username,
			u.password,
			u.is_active,
			u.is_credentials_non_expired,
			u.failed_login_attempts,
			u.last_login_attempt_dat,
			u.last_login_dat,
			u.secure_login_key,
			u.is_using_otp,
			u.cre_dat
		from 
		    access_data."user" u
		where
		    u.secure_login_key = #{token}
			and secure_login_key_expiration_dat &gt; now()
    </select>
    
    <select id="findUserById" resultMap="UserMap" useCache="false">
        select
			u.id,
			u.username,
			u.password,
			u.is_active,
			u.is_credentials_non_expired,
			u.failed_login_attempts,
			u.last_login_attempt_dat,
			u.last_login_dat,
			u.secure_login_key,
			u.is_using_otp
		from
			access_data."user" u
		where
			u.id = #{userId}
    </select>
    
    <select id="findUserByUsername" resultMap="UserMap" useCache="false">
        select
			u.id,
			u.username,
			u.password,
			u.is_active,
			u.is_credentials_non_expired,
			u.failed_login_attempts,
			u.last_login_attempt_dat,
			u.last_login_dat,
			u.secure_login_key,
			u.is_using_otp,
			u.cre_dat
		from
			access_data."user" u
		where
			u.username = #{username}
    </select>
    
    <insert id="insertUser" useGeneratedKeys="true" keyColumn="id" keyProperty="user.id">
        insert into
            access_data.user
            (username, password, is_credentials_non_expired, last_login_dat, cre_dat, mod_dat, cre_usr, mod_usr)
		values 
		    (
		    	#{user.username},
		    	#{user.password},
		    	false,
		    	null,
		    	now(),
		    	now(),
		    	user,
		    	user
	       )
	</insert>
	
	<insert id="insertUserRoles">
        insert into
            access_data.user_role
            (user_id, role_id, cre_dat, mod_dat, cre_usr, mod_usr)
		values
			<foreach collection="roles" item="role" index="index" open="(" separator="),("  close=")">
                #{userId},
		    	#{role.id},
		    	now(),
		    	now(),
		    	user,
		    	user
            </foreach>
	</insert>
	
	<delete id="deleteUserRoles">
        delete from
			access_data.user_role
		where
			user_id = #{userId}
			and role_id in
			<foreach collection="roles" item="role" index="index" open="(" separator=","  close=")">
		    	#{role.id}
            </foreach>
    </delete>
	
	<delete id="deleteUser">
        delete from
			access_data.user_role
		where
			user_id = #{userId};
		
		delete from
			user_data.level
		where
			user_id = #{userId};
		
		delete from
			access_data."user"
		where
			id = #{userId}
    </delete>
	
	<update id="updateLastLoginAttemptDatByUsername">
        update
			access_data."user"
		set
			last_login_attempt_dat = now()
		where
			username = #{username}
	</update>
	
	<update id="updateLastLoginDat">
        update
			access_data."user"
		set
			last_login_dat = now()
		where
			id = #{userId}
	</update>
    
    <update id="increaseFailedLoginAttempts">
        update
			access_data."user"
		set
			failed_login_attempts = failed_login_attempts + 1
		where
			id = #{userId}
	</update>
    
    <update id="increaseFailedLoginAttemptsByUsername">
        update
			access_data."user"
		set
			failed_login_attempts = failed_login_attempts + 1
		where
			username = #{username}
	</update>
	
    <update id="resetFailedLoginAttempts">
        update
			access_data."user"
		set
			failed_login_attempts = 0
		where
			id = #{userId}
	</update>
    
    <update id="updateUserPassword">
        update
			access_data."user"
		set
			is_credentials_non_expired = true,
			password = #{newPassword}
		where
			id = #{userId}
	</update>
	
    <update id="updateUsername">
        update
			access_data."user"
		set
			username = #{newUsername}
		where
			id = #{userId}
	</update>
	
	<select id="findRolesByUserId" resultMap="RoleMap" useCache="false">
        select
        	r.id,
			r."name"
		from
			access_data.user_role ur,
			access_data."role" r
		where
			ur.user_id = #{id}
			and ur.role_id = r.id
			and r.is_active = true
    </select>
	
	<select id="findSetting" resultType="java.lang.String" useCache="true">
        select
			value
		from
			access_data.settings
		where
			key = #{key}
    </select>
    
    <select id="findUserIdentityById" resultMap="UserIdentityMap" useCache="false">
        select
			u.id,
			u.username
		from
			access_data."user" u
		where
			u.id = #{id}
    </select>
    
    <sql id="findUsersLightWhere">
    	from
			access_data."user" u
			<where>
				<if test="filters.containsKey('id')">
					and u.id = #{filters.id}
				</if>
				<if test="filters.containsKey('username')">
					and u.username like '%' || #{filters.username} || '%'
				</if>
				<if test="filters.containsKey('isActive')">
					and u.is_active = #{filters.isActive}
				</if>
				<if test="filters.containsKey('isUsingOtp')">
					and u.is_using_otp = #{filters.isUsingOtp}
				</if>
				<if test="filters.containsKey('isCredentialsNonExpired')">
					and u.is_credentials_non_expired = #{filters.isCredentialsNonExpired}
				</if>
				<if test="filters.containsKey('lastLoginDateFrom')">
					and u.last_login_dat &gt;= #{filters.lastLoginDateFrom}
				</if>
				<if test="filters.containsKey('lastLoginDateTo')">
					and u.last_login_dat &lt;= #{filters.lastLoginDateTo}
				</if>
				<if test="filters.containsKey('creationDateFrom')">
					and u.cre_dat &gt;= #{filters.creationDateFrom}
				</if>
				<if test="filters.containsKey('creationDateTo')">
					and u.cre_dat &lt;= #{filters.creationDateTo}
				</if>
				<if test="filters.containsKey('roles')">
					and
					<choose>
						<when test="filters.containsKey('rolesAnd') and filters.rolesAnd">
							<bind name="rolesAmount" value="filters.roles.size()" />
							#{rolesAmount} = 
						</when>
						<otherwise>
							exists 
						</otherwise>
					</choose>
					(
						select
							count(*)
						from
							access_data.user_role ur
						where
							u.id = ur.user_id
							and ur.role_id in <foreach item="role"
												  collection="filters.roles" 
												  index="index"
												  open="("
												  separator=","
												  close=")">
					        	#{role}
						    </foreach>
					)
				</if>
			</where>
    </sql>
    
    <select id="findUsersLight" resultMap="UserLightMap" useCache="false">
        select
			u.id,
			u.username,
			u.password,
			u.is_active,
			u.is_credentials_non_expired,
			u.failed_login_attempts,
			u.last_login_attempt_dat,
			u.last_login_dat,
			u.is_using_otp,
			u.cre_dat
		<include refid="findUsersLightWhere"></include>
		order by
			id
		<if test="limit != null">
			limit #{limit}
		</if>
		<if test="offset != null">
			offset #{offset}
		</if>
    </select>
    
    <select id="findUsersLightAmount" resultType="java.lang.Integer" useCache="false">
        select
			count(*)
		<include refid="findUsersLightWhere"></include>
    </select>
    
    <update id="updateCredentialsNonExpired">
        update
			access_data."user"
		set
			is_credentials_non_expired = #{nonExpired}
		where
			id = #{userId}
    </update>
    
    <update id="updateActive">
        update
			access_data."user"
		set
			is_active = #{active}
		where
			id = #{userId}
    </update>
    
    <select id="findUserLoginKey" resultType="java.lang.String" useCache="false">
        select
			secure_login_key
		from
			access_data."user"
		where
			id = #{userId}
			and secure_login_key_expiration_dat &gt; now()
    </select>
    
    <update id="updateUserLoginKey">
        update
			access_data."user"
		set
			secure_login_key = #{token},
			secure_login_key_expiration_dat = #{tokenExpirationDate}
		where
			id = #{userId}
    </update>
    
    <select id="findAllUserRoles" resultMap="RoleMap" useCache="false">
        select
			id,
			"name"
		from
			access_data."role"
		where
			is_active = true
    </select>
    
    <insert id="insertUserPermission">
        insert into
            access_data.user_permission
            (granting_user_id, receiving_user_id, permission, revoke_dat, cre_dat, mod_dat, cre_usr, mod_usr)
		values
			(
                #{grantingUserId},
		    	#{receivingUserId},
		    	#{permission},
		    	null,
		    	now(),
		    	now(),
		    	user,
		    	user
            )
	</insert>
	
	<select id="hasUserPermission" resultType="java.lang.Boolean" useCache="false">
		<bind name="grantingUserIdsLength" value="grantingUserIds.length" />
		
        select
			count(0) = #{grantingUserIdsLength}
		from
			access_data.user_permission
		where
			granting_user_id in
			<foreach item="grantingUserId" collection="grantingUserIds" index="index" open="(" separator="," close=")">
	        	#{grantingUserId}
		    </foreach>
			and receiving_user_id = #{receivingUserId}
			and permission = #{permission}
			and
			(
			revoke_dat is null
			or revoke_dat > now()
			)
    </select>
    
    <select id="findUserIdentitiesGrantingPermission" resultMap="UserIdentityMap" useCache="false">
        select
			u.id,
			u.username
		from
			access_data.user_permission p,
			access_data."user" u
		where
			p.receiving_user_id = #{receivingUserId}
			and p."permission" = #{permission}
			and u.id = p.granting_user_id
		order by
			u.id
    </select>
    
    <select id="findUserIdentitiesReceivingPermission" resultMap="UserIdentityMap" useCache="false">
        select
			u.id,
			u.username
		from
			access_data.user_permission p,
			access_data."user" u
		where
			p.granting_user_id = #{grantingUserId}
			<if test="permission != null">
	            and p."permission" = #{permission}
	        </if>
			and u.id = p.granting_user_id
		order by
			p.permission, u.id
    </select>
    
    <select id="setPermissionsPIN" useCache="false">
        update
			access_data."user"
		set
			permissions_pin = #{ppin},
			permissions_pin_attempts = 0
		where
			id = #{userId}
    </select>
    
    <select id="increasePermissionsPINAttempts" useCache="false">
        update
			access_data."user"
		set
			permissions_pin_attempts = permissions_pin_attempts + 1
		where
			id = #{userId}
    </select>
    
    <select id="hasPermissionsPIN" resultType="java.lang.Boolean" useCache="false">
        select exists(        
	        select
				1
			from
				access_data."user"
			where
				id = #{userId}
				and permissions_pin = #{ppin}
				and permissions_pin_attempts &lt;= 1
        )
    </select>
    
    <select id="findUserTokenSecret" resultType="java.lang.String">
        select
			secret
		from
			access_data.user_auth
		where
			id = #{authId}
			and user_id = #{userId}
    </select>
    
    <update id="upsertUserAuthentication" useGeneratedKeys="true" keyColumn="id" keyProperty="auth.id">
        insert into
			access_data.user_auth
			(user_id, secret, cre_dat)
		values
			(
				#{auth.userId},
				#{auth.secretAsString},
				now()
			)
		on conflict
			(user_id) do update
		set
			secret = #{auth.secretAsString},
			cre_dat = now()
    </update>
    
    <delete id="deleteAllUserSessions">
    	delete from
    		access_data.user_auth
   		where
   			user_id = #{userId}
    </delete>
    
    <select id="isUserUsingOtp" resultType="java.lang.Boolean">
        select
			is_using_otp
		from
			access_data."user"
		where
			id = #{userId}
    </select>
    
    <update id="updateUserUsingOtp">
        update
			access_data."user"
		set
			is_using_otp = #{active}
		where
			id = #{userId}
    </update>
    
    <update id="updateUserOtpCredentials">
        update
			access_data."user"
		set
			otp_secret = #{creds.secret},
			otp_scratch_code_1 = #{creds.scratchCode1},
			otp_scratch_code_2 = #{creds.scratchCode2},
			otp_scratch_code_3 = #{creds.scratchCode3}
		where
			id = #{userId}
    </update>
    
    <select id="findUserOtpCredentials" resultMap="OtpCredentialsMap">
        select
			otp_secret,
			otp_scratch_code_1,
			otp_scratch_code_2,
			otp_scratch_code_3
		from
			access_data."user"
		where
			id = #{userId}
    </select>
    
</mapper>